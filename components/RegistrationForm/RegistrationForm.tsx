

'use client';

import css from './RegistrationForm.module.css';
import { useRouter } from 'next/navigation';
import { register } from '@/lib/api/apiClient';
import { useAuth } from '@/lib/store/authStore';
import toast from 'react-hot-toast';
import { useState } from 'react';
import Link from 'next/link';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import Image from 'next/image';

const SignupSchema = Yup.object().shape({
  name: Yup.string().required('–Ü–º‚Äô—è —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º'),
  email: Yup.string().email('–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞').required('–ü–æ—à—Ç–∞ —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ—é'),
  password: Yup.string().min(8, '–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤').required('–ü–∞—Ä–æ–ª—å —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º'),
});

const RegistrationForm = () => {
  const router = useRouter();
  const setUser = useAuth(state => state.setUser);
  const [errorMessage, setErrorMessage] = useState('');

  const handleSubmit = async (values: { name: string; email: string; password: string }) => {
    console.log("üì§ Form submitted with:", values);
    try {
      const res = await register(values);
    

      if (res) {
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ');
        
        setUser(res);
        router.push('/onboarding');
      }
    } catch { 
      setErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –ú–æ–∂–ª–∏–≤–æ, –∞–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.');
    }
  };

  return (
    <main className={css.mainContent}>
      <div className={css.wrapper}>
        <h1 className={css.formTitle}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h1>
      <Formik
        initialValues={{ name: '', email: '', password: '' }}
        validationSchema={SignupSchema}
        onSubmit={handleSubmit}
      >
              
        <Form className={css.form}>
          <div className={css.formGroup}>
            <label htmlFor="name">–Ü–º º—è</label>
            <Field id="name" name="name" type="text" className={css.input} />
            <ErrorMessage name="name" component="div" className={css.error} />
          </div>

          <div className={css.formGroup}>
            <label htmlFor="email">–ü–æ—à—Ç–∞</label>
            <Field id="email" name="email" type="email" className={css.input} />
            <ErrorMessage name="email" component="div" className={css.error} />
          </div>

          <div className={css.formGroup}>
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
            <Field id="password" name="password" type="password" className={css.input} />
            <ErrorMessage name="password" component="div" className={css.error} />
          </div>

          <button type="submit" className={css.submitButton}>
            –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
          </button>

          {errorMessage && <p className={css.error}>{errorMessage}</p>}
        </Form>
      </Formik>
      <div className={css.content}>
        <p className={css.contenText}>–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∫–∞—É–Ω—Ç?</p>
        <Link href="/auth/login" className={css.link}>
          –£–≤—ñ–π—Ç–∏
        </Link>
        </div>
      </div>
   <div className={css.imageWrapper}>
  <Image
    src="/imagies/stork.jpg"
    alt="–Ü–ª—é—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
    width={720} 
    height={900}
    className={css.image}
    priority
  />
</div>
      
    </main>
  );
};

export default RegistrationForm;
